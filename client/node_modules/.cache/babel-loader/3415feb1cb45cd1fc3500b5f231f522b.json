{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument, signInWithEmailAndPassword, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { userActionTypes } from \"./user.types\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get(); //put, puts things back into our regular Redux flow\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  //   console.log(\"I am fired\");\n  //   try {\n  //     const { user } = yield auth.signInWithPopup(googleProvider);\n  //     const userRef = yield call(createUserProfileDocument, user);\n  //     console.log(\"Iam snapsRef\", userRef);\n  //     const userSnapshot = yield userRef.get();\n  //     //put, puts things back into our regular Redux flow\n  //     yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  //   } catch (error) {\n  //     yield put(signInFailure(error));\n  //   }\n  try {\n    const {\n      user\n    } = yield auth.signInmethod(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    console.log(\"I am userRef\", userRef);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnap;\n    yield;\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","signInWithEmailAndPassword","getCurrentUser","userActionTypes","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInmethod","signInWithEmail","payload","email","password","console","log","isUserAuthenticated","getSnap","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  signInWithEmailAndPassword,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\n\nimport { userActionTypes } from \"./user.types\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    //put, puts things back into our regular Redux flow\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  //   console.log(\"I am fired\");\n  //   try {\n  //     const { user } = yield auth.signInWithPopup(googleProvider);\n  //     const userRef = yield call(createUserProfileDocument, user);\n  //     console.log(\"Iam snapsRef\", userRef);\n  //     const userSnapshot = yield userRef.get();\n  //     //put, puts things back into our regular Redux flow\n  //     yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  //   } catch (error) {\n  //     yield put(signInFailure(error));\n  //   }\n  try {\n    const { user } = yield auth.signInmethod(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    console.log(\"I am userRef\", userRef);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnap;\n    yield;\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}