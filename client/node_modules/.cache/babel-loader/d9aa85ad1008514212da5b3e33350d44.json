{"ast":null,"code":"// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from \"firebase/app\"; // Add the Firebase services that you want to use\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: \"AIzaSyBLqD6MfNBVj0EHI6KhtbaXogcBDWKdJd4\",\n  authDomain: \"e-shop-db-59460.firebaseapp.com\",\n  databaseURL: \"https://e-shop-db-59460.firebaseio.com\",\n  projectId: \"e-shop-db-59460\",\n  storageBucket: \"e-shop-db-59460.appspot.com\",\n  messagingSenderId: \"197196638417\",\n  appId: \"1:197196638417:web:7807cbfd7dc07f43af3df0\",\n  measurementId: \"G-NWKQG71CLY\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(\"error creating user\", err.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(\"I am collection\", collectionRef);\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); //auth.signInWithPopup(provider);\n\nexport const signInWithGoogle = () => firebase.auth().signInWithPopup(provider).then(function (result) {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  var token = result.credential.accessToken; // The signed-in user info.\n\n  var user = result.user; // ...\n}).catch(function (error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message; // The email of the user's account used.\n\n  var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n  var credential = error.credential; // ...\n});\nexport default firebase;","map":{"version":3,"sources":["/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","then","result","token","credential","accessToken","user","catch","error","errorCode","code","errorMessage"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B,C,CAEA;;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,iCAFC;AAGbC,EAAAA,WAAW,EAAE,wCAHA;AAIbC,EAAAA,SAAS,EAAE,iBAJE;AAKbC,EAAAA,aAAa,EAAE,6BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,GAAG,CAACG,OAAvC;AACD;AACF;;AACD,SAAOf,OAAP;AACD,CAnBM;AAqBP,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,WAAhB,KAAgC;AACvE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BK,aAA/B;AACD,CAHM;AAKPhC,QAAQ,CAACkC,aAAT,CAAuBjC,MAAvB;AAEA,OAAO,MAAMkC,IAAI,GAAGnC,QAAQ,CAACmC,IAAT,EAAb;AACP,OAAO,MAAMrB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,IAAIsB,QAAQ,GAAG,IAAIpC,QAAQ,CAACmC,IAAT,CAAcE,kBAAlB,EAAf;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAC9BxC,QAAQ,CACLmC,IADH,GAEGM,eAFH,CAEmBL,QAFnB,EAGGM,IAHH,CAGQ,UAAUC,MAAV,EAAkB;AACtB;AACA,MAAIC,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkBC,WAA9B,CAFsB,CAGtB;;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB,CAJsB,CAKtB;AACD,CATH,EAUGC,KAVH,CAUS,UAAUC,KAAV,EAAiB;AACtB;AACA,MAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,MAAIC,YAAY,GAAGH,KAAK,CAACrB,OAAzB,CAHsB,CAItB;;AACA,MAAIP,KAAK,GAAG4B,KAAK,CAAC5B,KAAlB,CALsB,CAMtB;;AACA,MAAIwB,UAAU,GAAGI,KAAK,CAACJ,UAAvB,CAPsB,CAQtB;AACD,CAnBH,CADK;AAsBP,eAAe7C,QAAf","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from \"firebase/app\";\n\n// Add the Firebase services that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst config = {\n  apiKey: \"AIzaSyBLqD6MfNBVj0EHI6KhtbaXogcBDWKdJd4\",\n  authDomain: \"e-shop-db-59460.firebaseapp.com\",\n  databaseURL: \"https://e-shop-db-59460.firebaseio.com\",\n  projectId: \"e-shop-db-59460\",\n  storageBucket: \"e-shop-db-59460.appspot.com\",\n  messagingSenderId: \"197196638417\",\n  appId: \"1:197196638417:web:7807cbfd7dc07f43af3df0\",\n  measurementId: \"G-NWKQG71CLY\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n  if (!snapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (err) {\n      console.log(\"error creating user\", err.message);\n    }\n  }\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(\"I am collection\", collectionRef);\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n//auth.signInWithPopup(provider);\nexport const signInWithGoogle = () =>\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function (result) {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      var token = result.credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n      // ...\n    })\n    .catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n    });\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}