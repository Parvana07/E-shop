{"ast":null,"code":"var _jsxFileName = \"/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/pages/shop/shop.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\"; // import { firestore } from \"../../firebase/firebase.utils\";\n// import { convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\n\nimport CollectionOverview from \"../collections-overview/collections-overview.component\";\nimport CategoryPage from \"../category/category.component\";\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../with-spinner/with-spinner.component\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CategoryPageWithSpinner = WithSpinner(CategoryPage);\n\nclass ShopPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  // without promise\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"collection\");\n  //   //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //   //at the time when this code renders\n  //   collectionRef.onSnapshot(async (snapshot) => {\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     console.log(\"i am collection\", collectionMap);\n  //     updateCollections(collectionMap);\n  //     this.setState({ isLoading: false });\n  //   });\n  // }\n  //with promise\n  componentDidMount() {\n    const {\n      isLoading\n    } = this.props; // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/e-shop-db-59460/databases/(default)/documents/collection\"\n    // )\n    //   .then((res) => res.json())\n    //   .then((collections) => console.log(collections));\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      isLoading\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: otherProps => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, otherProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId`,\n      render: otherProps => /*#__PURE__*/React.createElement(CategoryPageWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, otherProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = ({\n  shop: {\n    isFetching\n  }\n}) => ({\n  isLoading: isFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionStartAsync: dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/pages/shop/shop.component.jsx"],"names":["React","Component","Route","connect","CollectionOverview","CategoryPage","fetchCollectionStartAsync","WithSpinner","CollectionOverviewWithSpinner","CategoryPageWithSpinner","ShopPage","unsubscribeFromSnapshot","componentDidMount","isLoading","props","render","match","path","otherProps","mapStateToProps","shop","isFetching","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AAEA;;AACA,OAAOC,kBAAP,MAA+B,wDAA/B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AAEA,MAAMC,6BAA6B,GAAGD,WAAW,CAACH,kBAAD,CAAjD;AACA,MAAMK,uBAAuB,GAAGF,WAAW,CAACF,YAAD,CAA3C;;AAEA,MAAMK,QAAN,SAAuBT,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAK/BU,uBAL+B,GAKL,IALK;AAAA;;AAM/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKC,KAA3B,CADkB,CAElB;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKF,KAAvB;AACA,UAAM;AAAED,MAAAA;AAAF,QAAgB,KAAKC,KAA3B;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAGC,UAAD,iBACN,oBAAC,6BAAD;AACE,QAAA,SAAS,EAAEL;AADb,SAEMK,UAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAaE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEF,KAAK,CAACC,IAAK,gBAFtB;AAGE,MAAA,MAAM,EAAGC,UAAD,iBACN,oBAAC,uBAAD;AAAyB,QAAA,SAAS,EAAEL;AAApC,SAAmDK,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAuBD;;AAxD8B;;AA2DjC,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA;AAAF;AAAR,CAAD,MAA+B;AACrDR,EAAAA,SAAS,EAAEQ;AAD0C,CAA/B,CAAxB;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCjB,EAAAA,yBAAyB,EAAEiB,QAAQ,CAACjB,yBAAyB,EAA1B;AADK,CAAf,CAA3B;;AAIA,eAAeH,OAAO,CAACgB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CZ,QAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n// import { firestore } from \"../../firebase/firebase.utils\";\n\n// import { convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport CollectionOverview from \"../collections-overview/collections-overview.component\";\nimport CategoryPage from \"../category/category.component\";\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../with-spinner/with-spinner.component\";\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CategoryPageWithSpinner = WithSpinner(CategoryPage);\n\nclass ShopPage extends Component {\n  // state = {\n  //   isLoading: true,\n  // };\n\n  unsubscribeFromSnapshot = null;\n  // without promise\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"collection\");\n  //   //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //   //at the time when this code renders\n  //   collectionRef.onSnapshot(async (snapshot) => {\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     console.log(\"i am collection\", collectionMap);\n  //     updateCollections(collectionMap);\n  //     this.setState({ isLoading: false });\n  //   });\n  // }\n\n  //with promise\n  componentDidMount() {\n    const { isLoading } = this.props;\n    // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/e-shop-db-59460/databases/(default)/documents/collection\"\n    // )\n    //   .then((res) => res.json())\n    //   .then((collections) => console.log(collections));\n  }\n\n  render() {\n    const { match } = this.props;\n    const { isLoading } = this.props;\n    return (\n      <div className=\"shop-page\">\n        {/* <Route exact path={`${match.path}`} component={CollectionOverview} />\n        <Route path={`${match.path}/:collectionId`} component={CategoryPage} /> */}\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(otherProps) => (\n            <CollectionOverviewWithSpinner\n              isLoading={isLoading}\n              {...otherProps}\n            />\n          )}\n        />\n        <Route\n          exact\n          path={`${match.path}/:collectionId`}\n          render={(otherProps) => (\n            <CategoryPageWithSpinner isLoading={isLoading} {...otherProps} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ shop: { isFetching } }) => ({\n  isLoading: isFetching,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionStartAsync: dispatch(fetchCollectionStartAsync()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}