{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument, signInWithEmailAndPassword } from \"../../firebase/firebase.utils\";\nimport { userActionTypes } from \"./user.types\";\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from \"./user.actions\";\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); //put, puts things back into our regular Redux flow\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SING_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SING_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","signInWithEmailAndPassword","userActionTypes","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","onGoogleSignInStart","GOOGLE_SING_IN_START","signInWithEmail","payload","email","password","onEmailSignInStart","EMAIL_SING_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,0BAJF,QAKO,+BALP;AAOA,SAASC,eAAT,QAAgC,cAAhC;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,kBAJF,QAKO,gBALP;AAOA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACW,eAAL,CAAqBV,cAArB,CAAvB;AACA,UAAMW,OAAO,GAAG,MAAMb,IAAI,CAACG,yBAAD,EAA4BQ,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAHE,CAIF;;AACA,UAAMjB,GAAG,CACPQ,mBAAmB,CAAC;AAAEU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CADZ,CAAT;AAGD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACS,mBAAmB,CAACW,KAAD,CAApB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMtB,UAAU,CAACQ,eAAe,CAACe,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUW,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACG,0BAAL,CAAgCmB,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMX,OAAO,GAAG,MAAMb,IAAI,CAACG,yBAAD,EAA4BQ,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMjB,GAAG,CAACU,kBAAkB,CAAC;AAAEQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF;AAA1B,KAAD,CAAnB,CAAT;AACD,GALD,CAKE,OAAOI,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACW,kBAAkB,CAACS,KAAD,CAAnB,CAAT;AACD;AACF;AAED,OAAO,UAAUO,kBAAV,GAA+B;AACpC,QAAM5B,UAAU,CAACQ,eAAe,CAACqB,mBAAjB,EAAsCL,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAACmB,mBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  signInWithEmailAndPassword,\n} from \"../../firebase/firebase.utils\";\n\nimport { userActionTypes } from \"./user.types\";\nimport {\n  googleSignInSuccess,\n  googleSignInFailure,\n  emailSignInSuccess,\n  emailSignInFailure,\n} from \"./user.actions\";\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    //put, puts things back into our regular Redux flow\n    yield put(\n      googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n    );\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SING_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({ id: userSnapshot.id, ...userSnapshot }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SING_IN_START, signInWithEmail);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}