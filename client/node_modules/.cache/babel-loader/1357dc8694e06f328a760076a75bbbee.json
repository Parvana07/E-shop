{"ast":null,"code":"var _jsxFileName = \"/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/pages/shop/shop.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { firestore } from \"../../firebase/firebase.utils\";\nimport { convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport CollectionOverview from \"../collections-overview/collections-overview.component\";\nimport CategoryPage from \"../category/category.component\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../with-spinner/with-spinner.component\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CategoryPageWithSpinner = WithSpinner(CategoryPage);\n\nclass ShopPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  // without promise\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"collection\");\n  //   //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //   //at the time when this code renders\n  //   collectionRef.onSnapshot(async (snapshot) => {\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     console.log(\"i am collection\", collectionMap);\n  //     updateCollections(collectionMap);\n  //     this.setState({ isLoading: false });\n  //   });\n  // }\n  //with promise\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection(\"collection\"); //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n    //at the time when this code renders\n    // collectionRef.get().then((snapshot) => {\n    //   const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //   // console.log(\"i am collection\", collectionMap);\n    //   updateCollections(collectionMap);\n    //   this.setState({ isLoading: false });\n    // });\n\n    fetch(\"https://firestore.googleapis.com/v1/projects/e-shop-db-59460/databases/(default)/documents/collection\").then(res => res.json()).then(collections => console.log(collections));\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: otherProps => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, otherProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId`,\n      render: otherProps => /*#__PURE__*/React.createElement(CategoryPageWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, otherProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMaps => dispatch(updateCollections(collectionsMaps))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/pages/shop/shop.component.jsx"],"names":["React","Component","Route","connect","firestore","convertCollectionSnapshotToMap","CollectionOverview","CategoryPage","updateCollections","WithSpinner","CollectionOverviewWithSpinner","CategoryPageWithSpinner","ShopPage","state","isLoading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","fetch","then","res","json","collections","console","log","render","match","path","otherProps","mapDispatchToProps","dispatch","collectionsMaps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AAEA,SAASC,8BAAT,QAA+C,+BAA/C;AACA,OAAOC,kBAAP,MAA+B,wDAA/B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AAEA,MAAMC,6BAA6B,GAAGD,WAAW,CAACH,kBAAD,CAAjD;AACA,MAAMK,uBAAuB,GAAGF,WAAW,CAACF,YAAD,CAA3C;;AAEA,MAAMK,QAAN,SAAuBX,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BY,KAD+B,GACvB;AACNC,MAAAA,SAAS,EAAE;AADL,KADuB;AAAA,SAK/BC,uBAL+B,GAKL,IALK;AAAA;;AAM/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAER,MAAAA;AAAF,QAAwB,KAAKS,KAAnC;AACA,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,YAArB,CAAtB,CAFkB,CAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,IAAAA,KAAK,CACH,uGADG,CAAL,CAGGC,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISG,WAAD,IAAiBC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAJzB;AAKD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKX,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAgB,KAAKD,KAA3B;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEe,KAAK,CAACC,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAGC,UAAD,iBACN,oBAAC,6BAAD;AACE,QAAA,SAAS,EAAEhB;AADb,SAEMgB,UAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAaE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEF,KAAK,CAACC,IAAK,gBAFtB;AAGE,MAAA,MAAM,EAAGC,UAAD,iBACN,oBAAC,uBAAD;AAAyB,QAAA,SAAS,EAAEhB;AAApC,SAAmDgB,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAuBD;;AAlE8B;;AAqEjC,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCxB,EAAAA,iBAAiB,EAAGyB,eAAD,IACjBD,QAAQ,CAACxB,iBAAiB,CAACyB,eAAD,CAAlB;AAF8B,CAAf,CAA3B;;AAKA,eAAe9B,OAAO,CAAC,IAAD,EAAO4B,kBAAP,CAAP,CAAkCnB,QAAlC,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { firestore } from \"../../firebase/firebase.utils\";\n\nimport { convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport CollectionOverview from \"../collections-overview/collections-overview.component\";\nimport CategoryPage from \"../category/category.component\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../with-spinner/with-spinner.component\";\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CategoryPageWithSpinner = WithSpinner(CategoryPage);\n\nclass ShopPage extends Component {\n  state = {\n    isLoading: true,\n  };\n\n  unsubscribeFromSnapshot = null;\n  // without promise\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"collection\");\n  //   //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //   //at the time when this code renders\n  //   collectionRef.onSnapshot(async (snapshot) => {\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     console.log(\"i am collection\", collectionMap);\n  //     updateCollections(collectionMap);\n  //     this.setState({ isLoading: false });\n  //   });\n  // }\n\n  //with promise\n  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collection\");\n    //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n    //at the time when this code renders\n    // collectionRef.get().then((snapshot) => {\n    //   const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //   // console.log(\"i am collection\", collectionMap);\n    //   updateCollections(collectionMap);\n    //   this.setState({ isLoading: false });\n    // });\n\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/e-shop-db-59460/databases/(default)/documents/collection\"\n    )\n      .then((res) => res.json())\n      .then((collections) => console.log(collections));\n  }\n\n  render() {\n    const { match } = this.props;\n    const { isLoading } = this.state;\n    return (\n      <div className=\"shop-page\">\n        {/* <Route exact path={`${match.path}`} component={CollectionOverview} />\n        <Route path={`${match.path}/:collectionId`} component={CategoryPage} /> */}\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(otherProps) => (\n            <CollectionOverviewWithSpinner\n              isLoading={isLoading}\n              {...otherProps}\n            />\n          )}\n        />\n        <Route\n          exact\n          path={`${match.path}/:collectionId`}\n          render={(otherProps) => (\n            <CategoryPageWithSpinner isLoading={isLoading} {...otherProps} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateCollections: (collectionsMaps) =>\n    dispatch(updateCollections(collectionsMaps)),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}