{"ast":null,"code":"var _jsxFileName = \"/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/pages/shop/shop.component.jsx\";\nimport React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\"; // import { createStructuredSelector } from \"reselect\";\n// import { firestore } from \"../../firebase/firebase.utils\";\n// import { convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\n// import CollectionOverview from \"../collections-overview/collections-overview.component\";\n\nimport CollectionOverviewContainer from \"../collections-overview/collections-overview.container\";\nimport CategoryPageContainer from \"../category/category.container\"; // import CategoryPage from \"../category/category.component\";\n// import { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\n\nimport { fetchCollectionStart } from \"../../redux/shop/shop.actions\"; // import WithSpinner from \"../with-spinner/with-spinner.component\";\n// import {\n//   selectIsCollectionFetching,\n//   selectIsCollectionLoaded,\n// } from \"../../redux/shop/shop.selector\";\n// const CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\n// const CategoryPageWithSpinner = WithSpinner(CategoryPage);\n\nconst ShopPage = ({\n  match,\n  fetchCollectionStart\n}) => {\n  // state = {\n  //   isLoading: true,\n  // };\n  // unsubscribeFromSnapshot = null;\n  // without promise\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"collection\");\n  //   //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //   //at the time when this code renders\n  //   collectionRef.onSnapshot(async (snapshot) => {\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     console.log(\"i am collection\", collectionMap);\n  //     updateCollections(collectionMap);\n  //     this.setState({ isLoading: false });\n  //   });\n  // }\n  //with promise\n  useEffect(() => {\n    fetchCollectionStart();\n  }, []); // console.log(fetchCollectionStartAsync);\n  // fetch(\n  //   \"https://firestore.googleapis.com/v1/projects/e-shop-db-59460/databases/(default)/documents/collection\"\n  // )\n  //   .then((res) => res.json())\n  //   .then((collections) => console.log(collections));\n  // const { match } = this.props;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}` // render={(otherProps) => (\n    //   <CollectionOverviewWithSpinner\n    //     isLoading={isLoading}\n    //     {...otherProps}\n    //   />\n    // )}\n    ,\n    component: CollectionOverviewContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}/:collectionId` // render={(otherProps) => (\n    //   <CategoryPageWithSpinner\n    //     isLoading={!isCollectionLoaded}\n    //     {...otherProps}\n    //   />\n    // )}\n    ,\n    component: CategoryPageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}; // const mapStateToProps = ({ shop: { isFetching } }) => ({\n//   isLoading: isFetching,\n// });\n// const mapStateToProps = createStructuredSelector({\n//    isLoading: selectIsCollectionFetching,\n//   isCollectionLoaded: selectIsCollectionLoaded,\n// });\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionStart: () => dispatch(fetchCollectionStart())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","CollectionOverviewContainer","CategoryPageContainer","fetchCollectionStart","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;AAEA;AACA;;AACA,OAAOC,2BAAP,MAAwC,wDAAxC;AACA,OAAOC,qBAAP,MAAkC,gCAAlC,C,CACA;AACA;;AACA,SAASC,oBAAT,QAAqC,+BAArC,C,CACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASF,EAAAA;AAAT,CAAD,KAAqC;AACpD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAL,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,EAFM,CAAT,CArBoD,CAyBpD;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,IAAK,EAFtB,CAGE;AACA;AACA;AACA;AACA;AACA;AARF;AASE,IAAA,SAAS,EAAEL,2BATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAcE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK,gBAFtB,CAGE;AACA;AACA;AACA;AACA;AACA;AARF;AASE,IAAA,SAAS,EAAEJ,qBATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF;AA4BD,CA9DD,C,CAgEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCL,EAAAA,oBAAoB,EAAE,MAAMK,QAAQ,CAACL,oBAAoB,EAArB;AADI,CAAf,CAA3B;;AAIA,eAAeH,OAAO,CAAC,IAAD,EAAOO,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n// import { createStructuredSelector } from \"reselect\";\n// import { firestore } from \"../../firebase/firebase.utils\";\n\n// import { convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\n// import CollectionOverview from \"../collections-overview/collections-overview.component\";\nimport CollectionOverviewContainer from \"../collections-overview/collections-overview.container\";\nimport CategoryPageContainer from \"../category/category.container\";\n// import CategoryPage from \"../category/category.component\";\n// import { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport { fetchCollectionStart } from \"../../redux/shop/shop.actions\";\n// import WithSpinner from \"../with-spinner/with-spinner.component\";\n// import {\n//   selectIsCollectionFetching,\n//   selectIsCollectionLoaded,\n// } from \"../../redux/shop/shop.selector\";\n\n// const CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\n// const CategoryPageWithSpinner = WithSpinner(CategoryPage);\n\nconst ShopPage = ({ match, fetchCollectionStart }) => {\n  // state = {\n  //   isLoading: true,\n  // };\n\n  // unsubscribeFromSnapshot = null;\n  // without promise\n  // componentDidMount() {\n  //   const { updateCollections } = this.props;\n  //   const collectionRef = firestore.collection(\"collection\");\n  //   //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //   //at the time when this code renders\n  //   collectionRef.onSnapshot(async (snapshot) => {\n  //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n  //     console.log(\"i am collection\", collectionMap);\n  //     updateCollections(collectionMap);\n  //     this.setState({ isLoading: false });\n  //   });\n  // }\n\n  //with promise\n  useEffect(() => {\n    fetchCollectionStart();\n  }, []);\n\n  // console.log(fetchCollectionStartAsync);\n  // fetch(\n  //   \"https://firestore.googleapis.com/v1/projects/e-shop-db-59460/databases/(default)/documents/collection\"\n  // )\n  //   .then((res) => res.json())\n  //   .then((collections) => console.log(collections));\n\n  // const { match } = this.props;\n\n  return (\n    <div className=\"shop-page\">\n      {/* <Route exact path={`${match.path}`} component={CollectionOverview} />\n        <Route path={`${match.path}/:collectionId`} component={CategoryPage} /> */}\n      <Route\n        exact\n        path={`${match.path}`}\n        // render={(otherProps) => (\n        //   <CollectionOverviewWithSpinner\n        //     isLoading={isLoading}\n        //     {...otherProps}\n        //   />\n        // )}\n        component={CollectionOverviewContainer}\n      />\n      <Route\n        exact\n        path={`${match.path}/:collectionId`}\n        // render={(otherProps) => (\n        //   <CategoryPageWithSpinner\n        //     isLoading={!isCollectionLoaded}\n        //     {...otherProps}\n        //   />\n        // )}\n        component={CategoryPageContainer}\n      />\n    </div>\n  );\n};\n\n// const mapStateToProps = ({ shop: { isFetching } }) => ({\n//   isLoading: isFetching,\n// });\n\n// const mapStateToProps = createStructuredSelector({\n//    isLoading: selectIsCollectionFetching,\n//   isCollectionLoaded: selectIsCollectionLoaded,\n// });\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionStart: () => dispatch(fetchCollectionStart()),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}