{"ast":null,"code":"//takeEvery listens to every action of a specific type we pass to it\nimport { takeEvery } from \"redux-saga/effects\";\nimport { firestore, convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport ShopActionTypes from \"./shop.types\"; //what saga middleware does is its whole purpose is to tun these sagas all concurrently\n//takeEvery creates a non blocking call in order to not stop our application to continue running, it does not pause the javascript for anything inside of\n//our fecth collections async to come back. alternatively\n\nexport function* fecthCollectionsAsync() {\n  yield console.log(\"I am fired\");\n  const collectionRef = firestore.collection(\"collection\"); //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //at the time when this code renders\n\n  collectionRef.get().then(snapshot => {\n    const collectionMap = convertCollectionSnapshotToMap(snapshot); // console.log(\"i am collection\", collectionMap);\n    // this.setState({ isLoading: false });\n\n    dispatch(fetchCollectionSuccess(collectionMap));\n  }).catch(error => dispatch(fetchCollectionFails(error.message)));\n} //what this saga does with the effect is it's going to pause whenever a specific action type that we want comes in\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fecthCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/aliyevaparvana/Documents/Udemy/e-online-shop/src/redux/shop/shop.sagas.js"],"names":["takeEvery","firestore","convertCollectionSnapshotToMap","ShopActionTypes","fecthCollectionsAsync","console","log","collectionRef","collection","get","then","snapshot","collectionMap","dispatch","fetchCollectionSuccess","catch","error","fetchCollectionFails","message","fetchCollectionsStart","FETCH_COLLECTION_START"],"mappings":"AAAA;AACA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SACEC,SADF,EAEEC,8BAFF,QAGO,+BAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B,C,CAEA;AACA;AACA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,YAArB,CAAtB,CAFuC,CAIvC;AACA;;AACAD,EAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,UAAMC,aAAa,GAAGV,8BAA8B,CAACS,QAAD,CAApD,CADkB,CAElB;AACA;;AACAE,IAAAA,QAAQ,CAACC,sBAAsB,CAACF,aAAD,CAAvB,CAAR;AACD,GAPH,EAQGG,KARH,CAQUC,KAAD,IAAWH,QAAQ,CAACI,oBAAoB,CAACD,KAAK,CAACE,OAAP,CAArB,CAR5B;AASD,C,CACD;;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMnB,SAAS,CACbG,eAAe,CAACiB,sBADH,EAEbhB,qBAFa,CAAf;AAID","sourcesContent":["//takeEvery listens to every action of a specific type we pass to it\nimport { takeEvery } from \"redux-saga/effects\";\nimport {\n  firestore,\n  convertCollectionSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\n\nimport ShopActionTypes from \"./shop.types\";\n\n//what saga middleware does is its whole purpose is to tun these sagas all concurrently\n//takeEvery creates a non blocking call in order to not stop our application to continue running, it does not pause the javascript for anything inside of\n//our fecth collections async to come back. alternatively\nexport function* fecthCollectionsAsync() {\n  yield console.log(\"I am fired\");\n  const collectionRef = firestore.collection(\"collection\");\n\n  //whenever the collection updates or runs for the first time this collection ref will send us the snapshot representing the code of our collections objects array\n  //at the time when this code renders\n  collectionRef\n    .get()\n    .then((snapshot) => {\n      const collectionMap = convertCollectionSnapshotToMap(snapshot);\n      // console.log(\"i am collection\", collectionMap);\n      // this.setState({ isLoading: false });\n      dispatch(fetchCollectionSuccess(collectionMap));\n    })\n    .catch((error) => dispatch(fetchCollectionFails(error.message)));\n}\n//what this saga does with the effect is it's going to pause whenever a specific action type that we want comes in\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionTypes.FETCH_COLLECTION_START,\n    fecthCollectionsAsync\n  );\n}\n"]},"metadata":{},"sourceType":"module"}